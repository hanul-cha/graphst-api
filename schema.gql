type User {
  id: ID!
  userId: String!
  name: String!
  roles: [AuthRole!]
  questionForSearch: AuthQuestion!
  answerForSearch: String!
  countPost: Int!
  countFollower: Int!
  countFollowing: Int!
  isLike: Boolean!
}

enum AuthRole {
  """일반사용자"""
  user

  """관리자"""
  manager

  """개발자(전체권한)"""
  developer
}

enum AuthQuestion {
  """가장 좋아하는 음식은?"""
  favorite_food

  """가장 좋아하는 영화는?"""
  favorite_movie

  """가장 좋아하는 운동은?"""
  favorite_sports

  """가장 좋아하는 동물은?"""
  favorite_animal

  """가장 좋아하는 색깔은?"""
  favorite_color

  """가장 좋아하는 숫자는?"""
  favorite_number
}

type Post {
  id: ID!
  title: String!
  contents: String!
  createAt: Int!
  updateAt: Int!
  user: User!
  countLike: Int!
  isLike: Boolean!
  activeAt: Boolean!
  category: Category
  countComment: Int!
}


type Comment {
  id: ID!
  contents: String!
  user: User!
  countLike: Int!
  countUnlike: Int!
  isLike: Boolean!
  isUnlike: Boolean!
  isMyComment: Boolean!
}

type Category {
  id: ID!
  label: String!
}

type Query {
  users(perPage: Int, page: Int, after: String, order: String, asc: Boolean, followingId: String, followerId: String, likePostId: String): userPaginate
  getUserPublic(id: String!): User
  posts(perPage: Int, page: Int, after: String, order: PostOrder, asc: Boolean, userId: String, likeUserId: String, query: String, categoryId: String): postPaginate
  getPost(id: ID!): Post
  categories: [Category!]!
  comments(perPage: Int, page: Int, after: String, order: String, asc: Boolean, postId: String): commentPaginate
  getUser: User!
}

type userPaginate {
  totalCount: Int!
  nodes: [User!]!
  pageInfo: PageInfo!
}

type PageInfo {
  hasNextPage: Boolean!
  startPath: String!
  endPath: String!
}

type postPaginate {
  totalCount: Int!
  nodes: [Post!]!
  pageInfo: PageInfo!
}

enum PostOrder {
  title
  follower
  comment
}

type commentPaginate {
  totalCount: Int!
  nodes: [Comment!]!
  pageInfo: PageInfo!
}

type Mutation {
  signUp(userId: String!, password: String!, name: String!, questionForSearch: AuthQuestion!, answerForSearch: String!): User
  signIn(id: String!, password: String!): String
  changePassword(userId: String!, password: String!): Boolean
  validateQuestion(userId: String!, questionForSearch: AuthQuestion!, answerForSearch: String!): Boolean
  deleteCategory(id: ID!): Boolean!
  addCategory(label: String!): Boolean!
  createComment(postId: String!, contents: String!): Comment!
  deleteComment(commentId: String!): Boolean!
  createPost(title: String!, contents: String!, categoryId: String, activeAt: Boolean): Post!
  updatePost(title: String!, contents: String!, categoryId: String, activeAt: Boolean, postId: ID!): Post!
  deletePost(id: ID!): Boolean!
  updateActiveAt(id: ID!, active: Boolean!): Boolean!
  toggleLikeUser(targetId: String!, like: Boolean!): Boolean
  toggleLikePost(targetId: String!, like: Boolean!): Boolean
  toggleLikeCommentUnlike(targetId: String!, like: Boolean!): Boolean
  toggleLikeCommentLike(targetId: String!, like: Boolean!): Boolean
  deleteUser(id: ID!): Boolean
}
